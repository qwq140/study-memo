HTTP 기본적인 프로토콜 (전이중 : 요청하면 바로 응답하는 통신)
Stateless

클라이언트는 서버에 request하고 서버는 response한다.

클라이언트가 request를 하면
톰켓은 사용자마다 쓰레드를 생성한다.
서버의 response가 끝나면 해당 사용자의 쓰레드는 없어진다.

쓰레드 생성 제거를 계속하면 부하가 생긴다.
이를 해결하기 위해 '스레드 pool' 이라는 것을 사용한다.

스레드 pool
미리 스레드를 생성해놓음

클라이언트가 request를 할 때 미리 생성되어있는 스레드를 사용한다. 그리고 request, response 객체를 만든다.
처음 요청하는 클라이언트인 경우 톰켓에서는 세션저장소에 해당 클라이언트의 j세션ID를 만든다.( 클라이언트를 구분하기 위해 만듬)
응답이 끝나면 사용한 스레드를 반납만 하고 request, response 객체만 제거.


세션무효화 방법
1. 시간을 설정하여 해당 시간이 지나면 무효화
2. 강제로 무효화(로그아웃)
3. 해당 브라우저 닫기


stateless에서 세션을 사용하면 stateful 한것처럼 사용할수 있다.

폴링방식 : 1초마다 요청하는 방식
- html 전체를 리로드 한다. 일부분만 바뀌면 되는데 전체를 새로고침하는 문제가 있음.( 메시지를 작성중인데 전체가 리로드 되어서 작성하고 있던 메시지가 사라짐)
 이러한 문제점을 해결하기 위해 ajax(경량 통신)를 사용한다. (html로 응답을 하는 것이 아니라 일부분의 데이터로 응답)
 
웹소켓 : request 했을 때 response를 하는데 연결은 끊지 않는 것. (stateful)
           연결이 계속 유지되어 있어 부하가 심하다. 특정 페이지에서만 사용(채팅 페이지)
           양방향

SSE (구독방식) : request 선은 유지안하고 response 선만 유지한다.

--------------------

클라이언트 -------------> UserController   ---------------->  selectOne.jsp
               request             request           request           request
                                     response                             response

result를 request객체에 넣음.
기존에 있는 request객체를 그대로 재활용해서 사용.

Redirect는 데이터가 유지가 안된다. 그러므로 RequestDispatcher를 사용하여 request의 데이터를 유지시킨다.

------------
jsp 표현언어 (EL)
sessionScope는 적어주는것이 좋고 requestScope는 안적어도됨.

자바 코드를 jsp에서 작성하는 것은 디자이너와 협업하기에 안좋다. 
Controller에서 작성해서 request에 저장
-------------
로그인 끝날때까지 들고있어야할 데이터를 저장할 경우 세션에
한번 쓰고 버릴 데이터인 경우 request에 저장



----------------------------------------------------------
pooling
자바가 아닌 xml로 정의
자바로 하면 조금 변경하여도 전체 컴파일


-------------------------------------------
context.xml은 서버가시작될때 한번 실행
context.xml에서 100개를 미리 만들어놓음

web.xml은 사용자가 request 할때마다 실행 (필터링)
