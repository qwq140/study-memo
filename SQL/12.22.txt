BufferedWriter로 데이터 전송
POST 전송(주소로 데이터 전송)
헤더 : 들어가는 정보 HTTP 규약에 정의 되어 있음
바디 : username=ssar&password=1234&email=ssar@nate.com

GET 전송(주소로 데이터를 요청) ---> 정보를 읽어오는 것(전송할 데이터x) -> body가 없음
헤더 : 들어가는 정보 http 규약에 정의되어있음.

구체적인 요청을 위해서 데이터를 전달하는 방법 = 쿼리스트링
주소?통닭종류=양념통닭&음료=사이다&개수=2


POST, GET 전송, 쿼리스트링 공부!!


로그인의 method는 post

add throw declaration : 함수 전체에 try catch


stateless에서 login 요청은 어떻게 하는 걸까?

아이디 패스워드를 날리면서 아이디 패스워드 확인 요청 -> DB에서 아이디 패스워드를 확인, 있는것을 확인, 키(열쇠)를 사용자에게 줌
 -> 사용자는 받은 키(열쇠)를 주면서 다시 요청 -> 키(열쇠)를 받으면서 이전에 요청했던 사람이라는것을 인증

인증요청
사용자 : 키를 저장할 공간 필요 - 저장 공간 : 웹 브라우저의 쿠키 영역에 저장 ( 쿠키 : 클라이언트 저장소 )
서버 : 키를 저장할 공간 필요 - 저장 공간 : heap 메모리공간 세션 영역에 저장 ( 세션 : 서버 저장소 )

Set-Cookie

http 상태코드
100 - 기다려!! (아직 응답을 못함)
200 - 성공
300 - 다른 걸 응답해줄께
400 - 클라이언트야 너 요청 잘못했어
500 - 서버가 잘못된 것!! (치명적인 오류)


-----------------------------------
URI : Controller 요청
URL : 자원 요청

사용자마다 request, response 정보가 따로 있음. 
request, response 객체는 요청때마다 만들어짐 응답이 끝나고 나면 사라짐.

쿠키는 브라우저에 저장되어있고 요청할때마다 들고 간다.
세션에 데이터가 있는지 확인( 데이터가 있으면 인증된 )
세션에 저장하는 데이터는 유저 DB에서 해당 유저에 대한 레코드를 저장

쿠키는 장바구니 용도로 사용

쿠키는 브라우저에 저장하는 것이고 세션은 서버에 저장하는 것

-----------------------------------------
세션을 이용하면 stateless를 stateful처럼 할 수 있게 만듬

로그아웃은 j세션ID를 날리는 것


채팅예제 해보기!(소켓통신 개념 잡기)

 