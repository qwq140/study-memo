1. 내일 시험
User테이블 생성 (id, username, password, email, role(user, admin)) - 권한
회원가입, 로그인, 유저목록보기(select)((테이블, 삭제(delete)


2. 프로젝트 (2주) - 간단한 기업용 홈페이지!!, 내가 만들어보고 싶은 홈페이지
- 수요일에 이걸 만들어보고싶다!!

3. 프로젝트 진행하는 2주동안 (오전 2시간 특강)

- 서버가 전부다 data 리턴!!
리엑트 수업 (오전 9 - 11시30분) - 유튜브 (2달 마다 패러다임이 바뀜 유튜브로는 공부하기 힘듬)

애플리케이션 배포 - AWS서버만들고 배포!! - 간단하게 DB연결해서 User관리!!

스피링, 안드로이드

(상상해서 만들기 추천x)
모방을 추천


인터페이스구현
- 데이터를 응답하는 서버

애플리케이션테스트수행 (junit)


--------------------------------------------------------------------------------------------------

애플, 삼성, 퀘이사존, gs칼텍스, 대한항공

--------------------------------------------------------------------------------------------------
1.인터페이스 구현 (5수준)
- Rest API 구축 ( 스프링부트 )
- RespomseEntity ( 공통 응답 객체 )
- API 문서 만들기 (직접)
- Validation 체크
- 로그 파일 만들어보기

2.요구사항 확인
 -os선택?
 -db선택?
 -tomcat, jeus, weblogic, jetty 선택?
 -언어?( Node.js 단일스레드 (비동기), java 스레드)
 -형상관리
 -의존성관리 도구
 -os 세팅

3.통합구현
 - 송신서버만들기
 - 수신서버만들기 

----------------------------------------
JSP 프로젝트

1. 주제 선정 (모방) ---- 검사( 내일 점심시간까지 마무리 )
예) 아시아나
(1) 주제
(2) 사이트 주소
(3) 서비스 선택

2. 모방할 사이트의 내가 만들 서비스의 모든 페이지가 10개 있다면? -- 검사

캡쳐떠서 PPT 만들어서 MODEL

3. 모델 상세 설계
- 어떤 칼럼이 있는지 다 적음

4. 연관관계 설정
- 어느 테이블과 어느 테이블이 연결이 될껀지...

5. 프로젝트 세팅 (MVC 패턴 세팅)
 - 패키지 만들기
 - 모델 생성
 - DB연결
 - 기본적인 세팅

6. ui 만들기 (그림그리기)
 기능을 구현할 수 있겠금
 - 부트스트랩을 이용해서 (디자인 똑같이 할 필요 없음)

7. 검사 받고

8. 프로젝트 시작

----------
Jsp 프로젝트

1. 팀 생성 - 오늘까지
- 팀 했어요 보고

2. 주제 선정 (모방)   ----- 검사 ( 내일 점심시간까지 마무리 )
 (1) 주제
 (2) 사이트 주소
 (3) 서비스 선택

3. 모방할 사이트의 내가 만들 서비스의 모든 페이지가 10개 있다면?  -- 검사

(1) FEED PAGE
유저, 사진, 댓글, 좋아요

- 완벽하지 않음.          

4. 모델 상세 설계
- 어떤 칼럼이 있는지 다 적음

5. 연관관계 설정
- 어느 테이블과 어느 테이블이 연결이 될껀지...

6. 프로젝트 세팅 (MVC 패턴 세팅)
- 패키지 만들기
- 모델 생성
- db연결
- 기본적인 세팅

7. ui 만들기 (그림그리기)
- 부트스트랩

8. 최종 검사 받고

9. 프로젝트 시작!!

--------------------
Service URL : 라이브러리 받을때 쿼리스트링으로 받음

Type : 의존성 관리 도구

의존성 관리 도구에는 Maven, Gradle이 있다.
python에는 pip가 있고 자바스크립트에는 npm, yarn 우분투에는 apt 레드힛 : yum

라이브러리 관리
자동차 라이브러리 -> 실행 (잘 안됨, 바퀴, 창문 라이브러리에 의존적이라 실행이 안됨)
바퀴 라이브러리 -> 타이어, 휠, 나사에 의존적

1. 의존적인 것들을 다 다운
2. 빌드
3. 패키징
4. 실행
---------------------------------------------------------------------------------
STS툴

javac -> 컴파일
java -> 실행

classpath 설정을 해줘야함

의존성 관리 도구는
서로 연관되어 있는 라이브러리들을 패키징(포장)을 해줌

각 사이트에서 라이브러리를 다운받아야 하는데
의존성 관리 도구는 Repository(파일서버 - 버전관리서버)를 가지고 있음

안드로이드는 gradle만 지원

windows에서 개발 리눅스에서 개발
windows에서 가상환경(리눅스)을 만듬
 가상환경에서 세팅
 프로젝트를 패키징하는게 아니라 가상환경을 패키징
가상환경을 패키징한 것을 배포하는 곳에 줌 : docker


windows -> github -> 리눅스
         push           pull

cicd 도구 젠킨스 자동으로 배포해줌


jar 자바파일을 실행하는 도구

스프링은 내장톰켓을 가지고 있기 때문에 패키징을 jar로 한다.

Spring boot DevTools : 저장할때마다 재실행해줌


--------------------------------
오류가 뜰때 clean install
update project
툴을 끄고 m.2의 repository 삭제후 다시 실행

-----------------------------------
pom.xml 
만약 gson을 등록하고 싶다면

폴더에서 gson을 삭제하면 

update project를 누르면 pom.xml을 기반으로 업데이트해서 다시 gson을 등록

라이브러리를 날리고 싶으면 pom.xml에서 삭제 
pom.xml 다운 빌드 해줌 ( 폴더에 gson이 있다면 다운은 안하고 빌드만 해줌 )

maven 명령어

프리메이커 템플릿 엔진 -> html에 자바코드를 적음
디스패쳐 서블릿 필터 : /가 들어오면 /가 관련된 컨트롤러를 new 해줌 (@Controller @RestController 해당 어노테이션이 있는 클래스를 메모리에 띄움)

// 디스패쳐 서블릿 필터에서 com.example.demo 이하의 모든 패키지를
// 컴포넌트 스캔한다. 이때 찾는 어노테이션 => @Controller @RestController
// 그 클래스에서 GET : / 주소로 매핑된 메서드가 있는지 리플렉션
// @GetMapping, @PostMapping, @PutMapping, @DeleteMapping
// GET으로 했으면 GetMapping이 걸려있는 함수만 찾아내서
// / 로 주소가 걸려있는 함수를 invoke해준다.

// 어딘가에 떳어. heap => 힙을 가리키는 힙 => IoC 컨테이너
// Inversion of Controll = 제어의 역전

// @RestController => return시에 MessageConvertor 동작
//  저 값을 PrintWriter달아서 응답해준다.
// 응답의 값이 일반 String 바로 응답
// 응답의 값이 javaObject이면 json으로 파싱해서 응답

// MessageConvertor(부모) - json관련클래스 extends

// @Controller => return시에 ViewResolver 동작
// hello메시지 앞뒤로 먼가를 붙여서 그 파일을 return 해줍니다. (RequestDispatcher)

// jsp를 할꺼면 직접 viewResolver설정을 prefix, sufix

// src/main/resource/templates/  (prefix)
// 정해져있지 않음.

// RequestDispatcher dis = request.getRequestDispatcher("hello");
// dis.forward(request, response);


---------------
유튜브 스프링부트 개념정리 보기


유튜브
- 백기선

--------------------------------------------
스트링부트 jsp 세팅



------------------------
velopert 블로그
아빠프로그래머