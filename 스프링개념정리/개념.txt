1. controller 동작원리 = request, response
2. 필터 거는 법
3 response 공통적인 Object를 만들어서 응답 - User 오브젝트

탬플릿 엔진을 사용하는 이유
내가 응답하고 있는 것이 파일이기 때문에 파일이라고 알려줌

http://localhost:8080/start/hello requset 요청을 하면 컨트롤러를 메모리에 띄움


개발자가 직접 메모리에 띄우는게 아니라 requset요청시 컴포넌트 스캔하여 해당 컨트롤러를 메모리에 띄우는 것


결합도는 낮추고 응집도는 높힌다.


IoC가 레퍼런스를 관리하고
DI를 통해 레퍼런스에 접근한다.

DI는 생성자에 인수를 주입시켜준다.(IoC에 있는 것만) 

@Component : 특별한 용도가 없는 객체 = 타이밍이 @Controller, @RestController 띄우는 타이밍보다 늦음.
@Configuration : 설정과 관련된 객체 (가장 빠르게 리플렉션 됨)
타이밍 : @Configuration => @RestController or @Controller => @Component
@Configuration에서 필터를 적용시킬수 있다.

DI(의존성주입) - 타입으로 구분하기 때문에 싱글톤으로 관리한다.

빈 생성자가 아닌 인수가 있는 생성자 인 경우 IoC에 인수가 있는지 확인을 하고 없으면 오류가 발생




클라이언트로부터 request 요청을 받으면 디스패처 서블릿이 동작하여 해당 컨트롤러를 메모리에 띄움

IoC는 사용자(클라이언트)마다 있음.
Configuration 하나만 뜨지만 사용자마다 하나 뜸.

사용자 요청시에 컴포넌트 스캔을 한다. 이때 찾는 것은 @Configuration @Component @RestController @Controller @Repository @Service
@Configuration @Component @Repository @Service은 찾자마자 IoC에 집어 넣음  - context
@RestController @Controller는 실행하고 종료함 (디스패처 서블릿이 관리) -servlet 
context가 servlet보다 먼저 실행

web.xml을 다시 타는 것이 아니라 그안의 필터를 다시 타는것이다.
web.xml은 서버시작 시 한번만 탄다.

순차적으로 뜨도록 관리

최초요청 Servlet

Repository : 서버, DB, file
데이터 -- 서버 json, DB rs, file InputStream
1. 파싱을 한다.
2. 자바오브젝트로 바꿔준다.

컨트롤러는 서비스를 요청 서비스는 Repository를 요청

컨트롤러 레이어, 서비스 레이어, 레파지토리 레이어

@Service 서비스 : 기능정의, 트랜잭션 관리의 책임
컨트롤러 : 라우팅, 응답(data로 해줄지 파일로 해줄지) 책임

결합도가 높다 : 의존도가 높다.
응집도가 높다 : 객체끼리 커뮤니케이션이 잘된다.



https://getinthere.tistory.com/11


-----------------------------------------

RestController
기본적인 요청과 응답
validation 체크
로그 남기기
문서로 만들기
CORS

--------------------------
PathVariable : String을 id로 변환


----------------------------
2021.01.15

1. Validation 체크
request 할때 들어오는 쿼리스트링 또는 http body 값들을 필터가 받아서 처리

post: /user   username, password

/user -> 디스패처 -> /user 주소가 있는 함수 찾기
-> 그 함수의 매개변수 확인 -> String username, String password -> 개수 확인
-> 정상

--------------------------------------------------------
스프링 -> 디스패처가 구현되어있음

디스패처가 하는일
1. 주소 매핑
2. IoC @Controller @Rest 메모리에 띄움
3. 함수 매개변수 == request 값
4. 주입

AOP (리플렉션 공부하기)
Aspect Oriented Programing (관점 지향 프로그래밍)
핵심기능 : 회원가입, 유저정보보기 등등 
공통기능 : JoinPoint, PointCut
프록시공간으로 함수를 들고와서 그 함수의 앞뒤를 관리한다.

함수의 앞만 처리하고 싶으면 필터를 사용
함수의 앞뒤를 처리하고 싶으면 AOP를 사용


a함수 시작전 유효성검사
a함수가 응답할 때 응답에 대한 유효성 검사


@Configuration 설정 나머지는 @Component

JoinPoint는 @Around에서만 사용가능


Spring AOP PointCut 표현식
https://icarus8050.tistory.com/8

카운팅 같은거 전처리에서 처리


최종 입구에서 처리는 전처리
각각 함수의 앞뒤 처리는 AOP

로그 레벨 : error, warn, info, debug


bindingResult 문제가 있는 결과들을 다 담아둠
error.getField 어떤필드가 오류났는지

-------------------------------------
Spring5.0(WebFlux-병렬) -> RxJava - ReactivePrograming
->단일스레드, 비동기 -> RDBMS(MySQL, Oracle) 지원x
-> R2DBC (비동기 DB)

Spring(Servlet-스레드기반)
-> 페이지(Servlet) : 일반적인 상황
-> 페이지(webflux-R2DBC-SSE)    :  채팅할때 

/a, /b                              /c
서버1(servlet+웹소켓) + 서버2(webflux+see(프로토콜))
-> 이벤트 드리븐
-> Redis(메모리세션서버) + JWT 토큰방식
이벤트 드리븐 : 데이터가 바뀌었을 때 리퀘스트를 안햇는데도 화면을 다시 불러옴


오준석

AWS자격증 Docker, MSA
----------------------------------------
부트스트랩 모음
https://blog.naver.com/codingspecialist/221449851012

결제라이브러리
https://www.iamport.kr/getstarted

스트링부트 동작원리
https://getinthere.tistory.com/11

sentry.io : 웹으로 로그를 보여줌


1. 수업 복습하기 (실습)
2. 금요일 수업마치기 전까지 화면설계+모델 설명 제출 (참고;오태경자료)
3. 먼저 시작하고 싶으면 화면 부터 만들기
4. 다음주 월요일에 모델 나랑 협의해서 수정하기

git 자료
https://github.com/codingspecialist/Springboot-Jpa-AOP-Valid-RestDoc

https://github.com/codingspecialist/Springboot-Special-Lecture

-------------------------------------------------------
war 파일 배포
1. JSP 프로젝트를 엄청 간단하게 만들기
 - DB연
2. AWS 회원가입 (1년 프리티어)

3. PC임대 (EC2서버) - Iaas ( 인프라 as a 서비스)

컴퓨터 임대 - Iaas
컴퓨터 windows, tomcat, jdk 개발 환경 - Paas
컴퓨터 windows, 엑셀 - Saas
컴퓨터 windows, 파워포인트 - Saas

4. 리눅스 설치, 

5. windows에 putty 설치(22번접속)
아이디 : ubuntu
열쇠 : post.pem => post.ppk (putty gen)

6. ,톰켓 설치, 프로젝트를 배포 (war) 

쉘 - os에 명령
커널 - 하드웨어에 명령

리눅스 기본

22번 포트 접속 프로그램



RSA
-공개키 암호시스템
-전자서명이 가능한 알고리즘
-공개키 잠그면 비공개키로 열고 비공개키 잠그면 공개키 열기


정보보안 CIA
기밀성
무결성
가용성

암호화 어떻게 했는지? -> 키 전달

1. 상대방의 공개키로 잠그면 그 상대방만 읽을 수 있다.
 : 비밀

2. 자신의 비밀키로 잠그면 모두가 읽을 수 있다.
 : 비밀x
 : 전자서명(신뢰)

비공개키 (공인인증서)

상대방의 공개키를 사용하는 것은 기밀성은 확보하지만 무결성은 확보되지않는다.
무결성을 확보하는 방법은 상대방의 공개키와 메시지를 인크립션

프로토콜 : 송신자의 공개키로 열어서 신뢰성 확보
            : 수신자의 개인키로 열어서 기밀성 확보

리눅스 : 최고관리자 root => ubuntu
sudo apt-get update ( sudo : root의 권한을 대행 받는다 )
sudo apt-get search tomcat9
sudo apt-get install tomcat9
기본포트 8080 => http://52.78.94.179:8080
sudo find / -name tomcat9
sudo find / -name webapp
netstat -nlpt
sudo git clone 주소

시험 내일 점심시간까지 제출


----------------------------------
docker
sudo apt-get install docker.io
docker --version
sudo docker run -it ubuntu : 터미널모드로 들어감
touch a.txt - 빈 파일 생성
sudo docker ps
sudo docker commit be098 v1/ubuntu
sudo docker images
sudo docker run -it v1/ubuntu
ls
exit
sudo docker run -it ubuntu
ls
sudo docker pull aallam/tomcat-mysql
sudo docker images
sudo docker run -it -d v1/ubuntu
sudo docker ps


docker hub 

Docker 개념

-d : 백그라운드로 실행 (접속x)
-it : 터미널모드로 접속 (접속o)

docker exec 실행중인 프로세스에 접속하는 것
1. ubuntu, MySQL, Tomcat 설치를 하고 싶으면 docker hub(원격저장소)에서 다운을 받아야함
 ubuntu : os        tomcat : tomcat, os        mysql : mysql, os

도커 설치
sudo apt-get insrall docker.io
도커 이미지 확인
sudo docker images
도커 실행중인 프로세스 확인
docker ps
실행중인 프로세스 종료
docker stop 

docker ps -a
docker container prune (종료한 프로세스의 남은 찌꺼기 제거)
도커 이미지 제거
sudo docker rmi

톰켓 설치
docker pull tomcat

터미널로 접속
docker run -it tomcat
빠져나오기 : ctrl + c

bash로 접속
docker run -it tomcat /bin/bash

이미지 백그라운드로 실행
docker run -d tomcat 

백그라운드 프로세스로 접속
docker docker exec -it

백그라운드 프로세스 종료
docker stop 컨테이너id

포트포워딩 실행
docker run -d -p 8000:8080 tomcat

nano context.xml

docker  mysql 자동실행


 
root 비번 변경
sudo passwd root
su root



https://blog.naver.com/getinthere/221712169664

-----------------------------------------------------------
apt를 쓰면 down, install을 같이 해주고 service를 등록해준다.
service 모든 프로그램 접근

도커하둡



1. JSP 프로젝트를 엄청 간단하게 만들기
 - DB연결

2. AWS 회원가입 (1년 프리티어)

3. PC임대 (EC2서버) - Iaas (인프라 as a 서비스)

컴퓨터 임대 - Iaas
컴퓨터 windows, tomcat, jdk 개발 환경 - Paas
컴퓨터 windows, 엑셀 - Saas
컴퓨터 windows, 파워포인트 - Saas

4. 리눅스 설치


5. windows에 putty설치(22번접속)
아이디 : ubuntu
열쇠 : post.pem  => post.ppk (putty gen)

6. 톰켓 설치, 프로젝트를 배포(war)

최고관리자 root => ubuntu
sudo apt-get update
sudo apt-cache search tomcat
sudo apt-get install tomcat9
기본포트 8080 => http://52.78.94.179:8080
sudo find / -name tomcat9
sudo find / -name webapps
netstat -nlpt
sudo git clone 주소
sudo apt-get install mysql-server-5.7
sudo mysql -u root -p

---------------------------------------------------
create user 'postuser'@'%' identified by 'bitc5600';
GRANT ALL PRIVILEGES ON *.* TO 'postuser'@'%';
create database postdb;

use postdb;

create table post(
  id int primary key auto_increment,
  title varchar(100),
  content longtext
) engine=InnoDB default charset=utf8;

insert into post(title, content) values('제목1', '내용1');
insert into post(title, content) values('제목2', '내용2');
---------------------------------------------------
context.xml
-----------
     <Resource name="jdbc/TestDB" auth="Container" type="javax.sql.DataSource"
               maxTotal="100" maxIdle="30" maxWaitMillis="10000"
               username="postuser" password="bitc5600" driverClassName="com.mysql.cj.jdbc.Driver"
               url="jdbc:mysql://localhost:3306/postdb?serverTimezone=Asia/Seoul"/>

------------------------------------------------------
mysql 재시작
sudo service mysql restart

------------------------
https 서버 구축
https://blog.naver.com/codingspecialist/221333745666

------------------------
도커 설치
sudo apt-get install docker.io

root 비번 변경
sudo passwd root
su root

------------------------
톰켓 설치
docker pull tomcat

이미지 백그라운드로 실행
docker run -d tomcat

백그라운드 프로세스로 접속
docker exec -it 컨테이너id /bin/bash

백그라운드 프로세스 종료
docker stop 컨테이너id

포트포워딩 실행
docker run -d -p 8000:8080 tomcat

webapps 폴더 접근
apt-get update
apt-get install nano

ROOT폴더 만드는 법 mkdir ROOT
webapps/ROOT 폴더에 index.html 생성하기

apt-get install net-tools & ifconfig

---------락 걸린 파일 삭제하기
rm /var/lib/apt/lists/lock 
rm /var/cache/apt/archives/lock 
rm /var/lib/dpkg/lock*

---------mysql 설치
apt-get install default-mysql-server

-------서비스 실행
service mysql start

------MySQL 접속
mysql -u root -p

----사용자생성, Table생성 - 샘플데이터 추가

----톰켓 context.xml 수정

----war배포
